<?xml version="1.0" encoding="UTF-8"?>
<project name="Dhii Repo Boostrap" default="init" basedir="." description="">

    <property name="quiet" value="false" />

    <!-- Import Build Functions -->
    <property name="buildFnFile" value="build-functions.php" />
    <php expression="require('${buildFnFile}');" />

    <!-- Default Timezone -->
    <php expression="date_default_timezone_set('UTC');" />

    <!--
        VARIABLE DEFAULTS
    -->
    <property name="default.project.name"          value="My New Project" />
    <property name="default.composer.vendor"       value="dhii" />
    <property name="default.composer.name"         value="new-project" />
    <property name="default.composer.desc"         value="" />
    <property name="default.composer.type"         value="library" />
    <property name="default.composer.license"      value="MIT" />
    <property name="default.composer.author"       value="Dhii Team" />
    <property name="default.composer.email"        value="development@dhii.co" />
    <property name="default.composer.minstab"      value="dev" />
    <property name="default.composer.phpver"       value="^5.3 | ^7.0" />
    <property name="default.composer.autoload.ns"  value="Dhii\NewProject" />
    <property name="default.composer.autoload.dir" value="src" />
    <property name="default.git.remote"            value="(none)" />

    <!--
        VARIABLE PROMPTS
    -->
    <if>
        <isfalse value="${quiet}" />
        <then>
            <!-- Prompt for author -->
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.author}"       propertyName="composer.author"       promptText="Author Name" />
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.email}"        propertyName="composer.email"        promptText="Author Email" />

            <!-- Generate vendor from author -->
            <php expression="toKebabCase('${composer.author}')" returnProperty="default.composer.vendor" />

            <!-- Prompt for vendor -->
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.vendor}"       propertyName="composer.vendor"       promptText="Vendor" />

            <!-- Generate organization name from vendor -->
            <php expression="kebabCaseToUcWords('${composer.vendor}')" returnProperty="organization" />

            <!-- Prompt for project name -->
            <propertyprompt useExistingValue="true" defaultValue="${default.project.name}"          propertyName="project.name"          promptText="Project Name"/>

            <!-- Generate package name from project name -->
            <php expression="toKebabCase('${project.name}')" returnProperty="default.composer.name" />

            <!-- prompt for Composer package info -->
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.name}"         propertyName="composer.name"         promptText="Package Name"/>
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.desc}"         propertyName="composer.desc"         promptText="Description"/>
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.type}"         propertyName="composer.type"         promptText="Package Type" />

            <!-- Prompt for license -->
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.license}"      propertyName="composer.license"      promptText="License" />
            <php expression="strtoupper('${composer.license}')" returnProperty="composer.license" />

            <php expression="generateNamespace('${composer.vendor}', '${project.name}')" returnProperty="default.composer.autoload.ns" />

            <!-- Prompt fpor the rest -->
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.minstab}"      propertyName="composer.minstab"      promptText="Minimum Stability" />
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.phpver}"       propertyName="composer.phpver"       promptText="PHP Version Constraint" />
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.autoload.ns}"  propertyName="composer.autoload.ns"  promptText="PSR-4 Autoload Namespace" />
            <propertyprompt useExistingValue="true" defaultValue="${default.composer.autoload.dir}" propertyName="composer.autoload.dir" promptText="PSR-4 Autoload Directory" />
            <propertyprompt useExistingValue="true" defaultValue="${default.git.remote}"            propertyName="git.remote"            promptText="Git Remote URL" />
        </then>
    </if>

    <!--
        VARIABLE COMPUTATION
    -->
    <property name="netbeans.project.name" value="${composer.vendor} - ${composer.name}" />
    <property name="composer.autoload.ns" value="${composer.autoload.ns}\" override="true" />
    <propertyregex property="composer.autoload.ns"
        override="true"
        subject="${composer.autoload.ns}"
        pattern="\\"
        replace="\\\\\\\\" />

    <tstamp>
        <format property="date.year" pattern="%Y" />
    </tstamp>

    <!--
        OTHER VARS
    -->
    <property name="file.nb.project.xml"        value="project.xml" />
    <property name="file.nb.project.properties" value="project.properties" />

    <property name="file.composer.lock"         value="composer.lock" />

    <property name="file.composer.json"         value="composer.json" />
    <property name="template.composer.json"     value="composer.json.template" />

    <property name="file.readme.md"             value="README.md" />
    <property name="template.readme.md"         value="README.md.template" />

    <property name="file.changelog.md"          value="CHANGELOG.md" />
    <property name="template.changelog.md"      value="CHANGELOG.md.template" />

    <property name="dir.licenses"               value="./licenses" />
    <property name="file.license"               value="LICENSE" />
    <property name="template.license"           value="LICENSE-${composer.license}" />

    <property name="file.build.xml"             value="build.xml" />

    <!--
        FILESETS
    -->
    <fileset id="netbeans.project.xml" dir="./nbproject">
        <include pattern="${file.nb.project.xml}" />
    </fileset>

    <fileset id="netbeans.project.properties" dir="./nbproject">
        <include pattern="${file.nb.project.properties}" />
    </fileset>

    <fileset id="composer.json" dir=".">
        <include pattern="${file.composer.json}" />
    </fileset>

    <fileset id="readme.md" dir=".">
        <include pattern="${file.readme.md}" />
    </fileset>

    <fileset id="files.git" dir=".">
        <include pattern="**/.gitkeep" />
    </fileset>

    <!--
        MAIN TARGET
    -->
    <target name="init"
            depends="
                files.init,
                composer.init,
                netbeans.init,
                readme.init,
                license.init,
                git.init,
                finalize,
                selfdestruct">
    </target>

    <!--
        Initializes the files
    -->
    <target name="files.init">
        <move file="${template.composer.json}" tofile="${file.composer.json}" overwrite="true" />
        <move file="${template.readme.md}"     tofile="${file.readme.md}" overwrite="true" />
        <move file="${template.changelog.md}"  tofile="${file.changelog.md}" overwrite="true" />
    </target>

    <!--
        COMPOSER PACKAGE INITIALIZER
        Replaces the tokens in composer.json
    -->
    <target name="composer.init" description="Sets the composer package info">
        <reflexive>
            <fileset refid="composer.json" />
            <filterchain>
                <replaceregexp>
                    <regexp pattern="\[\*composer\.vendor\*\]"       replace="${composer.vendor}" />
                    <regexp pattern="\[\*composer\.name\*\]"         replace="${composer.name}" />
                    <regexp pattern="\[\*composer\.desc\*\]"         replace="${composer.desc}" />
                    <regexp pattern="\[\*composer\.type\*\]"         replace="${composer.type}" />
                    <regexp pattern="\[\*composer\.license\*\]"      replace="${composer.license}" />
                    <regexp pattern="\[\*composer\.author\*\]"       replace="${composer.author}" />
                    <regexp pattern="\[\*composer\.email\*\]"        replace="${composer.email}" />
                    <regexp pattern="\[\*composer\.minstab\*\]"      replace="${composer.minstab}" />
                    <regexp pattern="\[\*composer\.phpver\*\]"       replace="${composer.phpver}" />
                    <regexp pattern="\[\*composer\.autoload.ns\*\]"  replace="${composer.autoload.ns}" />
                    <regexp pattern="\[\*composer\.autoload.dir\*\]" replace="${composer.autoload.dir}" />
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!--
        NETBEANS PROJECT FILES INITIALIZER
        Main target for NB project file modifications
    -->
    <target name="netbeans.init" description="" depends="netbeans.init.project.xml, netbeans.init.project.properties">
    </target>

    <!--
        NETBEANS PROJECT XML FILE
        Replaces tokens in the NB project XML file
    -->
    <target name="netbeans.init.project.xml" description="Updates the NetBeans Project Info File">
        <reflexive>
            <fileset refid="netbeans.project.xml" />
            <filterchain>
                <replacetokens begintoken="[*" endtoken="*]">
                    <token key="netbeans.project.name" value="${netbeans.project.name}" />
                </replacetokens>
            </filterchain>
        </reflexive>
    </target>

    <!--
        NETBEANS PROJECT PROPERTIES FILE
        Replaces tokens in the NB properties file
    -->
    <target name="netbeans.init.project.properties" description="Updates the NetBeans Properties File">
        <reflexive>
            <fileset refid="netbeans.project.properties" />
            <filterchain>
                <replaceregexp>
                    <regexp pattern="\[\*composer\.name\*\]"  replace="${composer.name}"/>
                </replaceregexp>
            </filterchain>
        </reflexive>
    </target>

    <!--
        README UPDATER
        Updates the readme with the package name and description.
    -->
    <target name="readme.init" description="">
        <reflexive>
            <fileset refid="readme.md" />
            <filterchain>
                    <replacetokens begintoken="{{" endtoken="}}">
                        <token key="project"               value="${project.name}" />
                        <token key="organization"          value="${organization}" />
                        <token key="year"                  value="${date.year}" />
                        <token key="composer.vendor"       value="${composer.vendor}" />
                        <token key="composer.name"         value="${composer.name}" />
                        <token key="composer.desc"         value="${composer.desc}" />
                        <token key="composer.type"         value="${composer.type}" />
                        <token key="composer.license"      value="${composer.license}" />
                        <token key="composer.author"       value="${composer.author}" />
                        <token key="composer.email"        value="${composer.email}" />
                        <token key="composer.minstab"      value="${composer.minstab}" />
                        <token key="composer.phpver"       value="${composer.phpver}" />
                        <token key="composer.autoload.ns"  value="${composer.autoload.ns}" />
                        <token key="composer.autoload.dir" value="${composer.autoload.dir}" />
                    </replacetokens>
            </filterchain>
        </reflexive>
    </target>

    <!--
        LICENSE FILE
        Templates the correct license file and removes the others.
    -->
    <target name="license.init">
        <reflexive>
            <fileset dir="${dir.licenses}" >
                <include pattern="${template.license}" />
            </fileset>
            <filterchain>
                <replacetokens begintoken="{{" endtoken="}}">
                    <token key="project" value="${project.name}" />
                    <token key="organization" value="${organization}" />
                    <token key="year" value="${date.year}" />
                </replacetokens>
            </filterchain>
        </reflexive>
        <move file="${dir.licenses}/${template.license}" tofile="${file.license}" overwrite="true" />
        <delete dir="${dir.licenses}" />
    </target>

    <!--
        Initializes GIT repository
    -->
    <target name="git.init">
        <exec command="rm -rf .git" />
        <exec command="git init" />
        <exec command="git branch master" />
        <exec command="git branch develop" />
        <exec command="git checkout master" />
        <if>
            <not><equals arg1="${git.remote}" arg2="(none)" /></not>
            <then>
                <exec command="git remote add origin ${git.remote}" />
            </then>
        </if>
        <exec command="git add -a" />
    </target>

    <!--
        Finalization
    -->
    <target name="finalize">
        <delete>
            <fileset refid="files.git" />
        </delete>
        <delete file="${file.composer.lock}" />
        <exec command="composer update" passthru="true" />
    </target>

    <!--
        Selfdestruct
    -->
    <target name="selfdestruct">
        <delete file="${file.build.xml}" />
        <delete file="${buildFnFile}" />
    </target>

</project>
